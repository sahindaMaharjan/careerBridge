@model List<careerBridge.Models.ExternalJobViewModel>
@using Microsoft.AspNetCore.Identity
@using careerBridge.Areas.Identity.Data
@inject UserManager<careerBridgeUser> UserManager
@inject SignInManager<careerBridgeUser> SignInManager

@{
    ViewData["Title"] = "Student Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var currentUser = await UserManager.GetUserAsync(User);
    var username = currentUser?.Fullname ?? "Student";
}

<link href="https://cdn.jsdelivr.net/npm/bootswatch@5.3.0/dist/flatly/bootstrap.min.css" rel="stylesheet" />

<div class="container mt-5">
    <h1 class="text-success">Welcome, @username!</h1>

    <p class="mb-4">
        <a asp-controller="Student" asp-action="Events" class="btn btn-primary me-2">
            View Upcoming Events
        </a>
        <a asp-controller="Student" asp-action="JobList" class="btn btn-secondary">
            View Employer-Posted Jobs
        </a>
    </p>

    @if (TempData["Message"] != null)
    {
        <div class="alert alert-success">@TempData["Message"]</div>
    }

    <h2>Search Jobs</h2>
    <form method="get" class="row g-3 mb-4">
        <div class="col-md-4">
            <input type="text" name="searchQuery" class="form-control" placeholder="e.g. software engineer" value="@Context.Request.Query["searchQuery"]" />
        </div>
        <div class="col-md-2">
            <input type="text" name="location" class="form-control" placeholder="Location" value="@Context.Request.Query["location"]" />
        </div>
        <div class="col-md-2">
            <input type="number" name="minSalary" class="form-control" placeholder="Min Salary" />
        </div>
        <div class="col-md-2">
            <select name="posted" class="form-select">
                <option value="">Any time</option>
                <option value="1">Past 24 hours</option>
                <option value="3">Past 3 days</option>
                <option value="7">Past week</option>
            </select>
        </div>
        <div class="col-md-2">
            <button type="submit" class="btn btn-primary w-100">Search</button>
        </div>
    </form>

    @if (Model != null && Model.Any())
    {
        <h3>Job Results:</h3>
        <ul class="list-group">
            @foreach (var job in Model)
            {
                <li class="list-group-item mb-3">
                    <h5>@job.Title</h5>
                    <p><strong>@job.CompanyName</strong> — @job.Location</p>
                    <p><small>Category: @job.Category</small></p>

                    <p>
                        @job.Description.Substring(0, Math.Min(150, job.Description.Length))...
                        <a href="#" onclick="toggleDescription(this); return false;">Read more</a>
                    </p>
                    <p class="full-description d-none">@job.Description</p>

                    <form method="post" asp-action="Apply" asp-controller="Student">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="jobTitle" value="@job.Title" />
                        <input type="hidden" name="company" value="@job.CompanyName" />
                        <button type="submit" class="btn btn-sm btn-outline-success">Apply</button>
                    </form>
                </li>
            }
        </ul>
    }
    else if (!string.IsNullOrEmpty(Context.Request.Query["searchQuery"]))
    {
        <p>No jobs found for "@Context.Request.Query["searchQuery"]"</p>
    }
</div>

<script>
    function toggleDescription(link) {
        var full = link.parentElement.nextElementSibling;
        full.classList.toggle('d-none');
        link.remove();
    }
</script>
